;#include "sim800l.h"
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mega32.h>
;#include <stdio.h>
;#include <delay.h>
;#include <string.h>
;#include <stdint.h>
;
;
;char data[100];
;char call[100];
; char sms[100];
; char hour[20];
;char minute[20] ;
;char number[17];
;char por[100];
;char number_s[100];
;int i;
;int t;
;int counter=0;
;
; void sim800l_init(void)
; 0001 0018  {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0019   puts("AT+Cmgf=1\r\n");
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 001A     puts("AT+CNMI=2,2,0,0,0\r\n");
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 001B     delay_ms(500);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 001C 
; 0001 001D 
; 0001 001E  }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0

	.DSEG
_0x20003:
	.BYTE 0x20
;
;
;
;
;
;
;
;
;
;
;
;
;void send_sms(  char *a,char *number_s)
; 0001 002C {

	.CSEG
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 002D 
; 0001 002E    sprintf(call,"AT+Cmgf=1\r\n");
;PCODE: $0000001B VOL: 0
;	*a -> Y+2
;	*number_s -> Y+0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 002F     puts(call);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0030     delay_ms(500);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0031    sprintf(call,"AT+CSMP=17,167,0,0\r\n");
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0032     puts(call);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0033     delay_ms(500);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0034     sprintf(call,"AT+CMGS=");
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0035     strcat(call,number_s);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0036     sprintf(por,"\r\n");
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0037     strcat(call,por) ;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 0038     puts(call);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0039       delay_ms(500);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 003A       puts(a);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 003B       delay_ms(100);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 003C        UDR=(26);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 003D 
; 0001 003E }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;
;
;
; void phone_number_seprate(void)
; 0001 0044  {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0045   for(i=0;i<15;i++)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0046   {
; 0001 0047    number[i]=data[i+8] ;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0048    t=2;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0049 
; 0001 004A   }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 004B 
; 0001 004C  }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;
;
;
;void sms_seprate(void)
; 0001 0051  {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 0052  for(i=0;i<13;i++)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 0053 {
; 0001 0054 sms[i]=data[i+51] ;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 0055 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 0056 
; 0001 0057 }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;
;
;
; void time_hour_seprate(void)
; 0001 005C  {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 005D  for(i=0;i<2;i++)
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 005E {
; 0001 005F hour[i]=data[i+37] ;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 0060 }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 0061 
; 0001 0062 }
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;
;
;
;
;
;
;
; void time_minute_seprate(void)
; 0001 006B  {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 006C  for(i=0;i<2;i++)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0001 006D {
; 0001 006E minute[i]=data[i+40] ;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 006F }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0070 
; 0001 0071 }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;
;
;
;
